GTCEuStartupEvents.registry('gtceu:recipe_type', event => {
    /*
    event.create('kinetic_generator')
        .category('fgcraft')
        .setEUIO('out')
        .setMaxIOSize(1, 0, 1, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_MIXER, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MIXER)
    */
    event.create('greenhouse')
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(6, 6, 2, 1)
        .setProgressBar(GuiTextures.PROGRESS_BAR_BATH, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.COOLING)
    event.create("fishing_ground")
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(2, 24, 1, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create('ammo_assembler')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(3, 3, 2, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ASSEMBLER)
    event.create('rocket_manufacture')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(12, 1, 0, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ASSEMBLER)
    event.create('nuclear_implosion_compressor')
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, false, GuiTextures.IMPLOSION_OVERLAY_1)
        .setSlotOverlay(false, false, true, GuiTextures.IMPLOSION_OVERLAY_2)
        .setMaxIOSize(6, 3, 0, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ASSEMBLER)
    event.create('genetic_extractor')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(6, 3, 3, 3)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)
    event.create('biological_cloner')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(6, 6, 3, 3)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)
    event.create('advanced_biological_cloner')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(9, 9, 9, 9)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW_MULTIPLE, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.CHEMICAL)
    event.create('source_reactor')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(9, 1, 1, 1)
        .setProgressBar(GuiTextures.PROGRESS_BAR_CIRCUIT_ASSEMBLER, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.PORTAL_OPENING)
    event.create('keke_generator')
        .category('fgcraft')
        .setEUIO("out")
        .setMaxIOSize(2, 0, 2, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_CIRCUIT_ASSEMBLER, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.REPLICATOR)
    event.create('bedrock_miner')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(2, 81, 1, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create('planet_fluid_extractor')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(2, 0, 1, 9)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create('fission_reactor')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(2, 2, 1, 1)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.BOILER)
    event.create("integrated_ore_processor")
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(2, 9, 1, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MACERATOR)
    event.create('cosmic_matter_collector')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(2, 6, 0, 3)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create('quark_reassembler')
        .category('fgcraft')
        .setEUIO("in")
        .setMaxIOSize(6, 6, 3, 3)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create("space_elevator")
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(1, 0, 0, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
    event.create("assembler_module")
        .category('fgcraft')
        .setEUIO("in")
        .setMaxTooltips(4)
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(16, 1, 4, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.ASSEMBLER)
    event.create("miner_module")
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(2, 6, 1, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create("drilling_module")
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(2, 0, 1, 1)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.MINER)
    event.create("cosmos_simulation")
        .category('fgcraft')
        .setEUIO("out")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(1, 120, 1, 18)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.SCIENCE)
    event.create("infinity_crafting")
        .category('fgcraft')
        .setEUIO("in")
        .setSlotOverlay(false, false, GuiTextures.SOLIDIFIER_OVERLAY)
        .setMaxIOSize(144, 1, 0, 0)
        .setProgressBar(GuiTextures.PROGRESS_BAR_ARROW, FillDirection.LEFT_TO_RIGHT)
        .setSound(GTSoundEntries.SCIENCE)
})

GTCEuStartupEvents.registry('gtceu:machine', event => {
    /*
    event.create('multiblock_kinetic_generator', 'multiblock')
        .rotationState(RotationState.NON_Y_AXIS)
        .appearanceBlock(GTBlocks.MACHINE_CASING_ULV)
        .recipeType('kinetic_generator')
        .pattern(definition => FactoryBlockPattern.start()
            .aisle('CCC', ' O ', '   ')
            .aisle('COC', 'SWP', ' O ')
            .aisle('CKC', ' O ', '   ')
            .where('K', Predicates.controller(Predicates.blocks(definition.get())))
            .where('W', Predicates.blocks(GTBlocks.CASING_BRONZE_GEARBOX.get()))
            .where('S', Predicates.abilities(PartAbility.INPUT_KINETIC).setExactLimit(1))
            .where('P', Predicates.abilities(PartAbility.OUTPUT_ENERGY).setExactLimit(1))
            .where(' ', Predicates.any())
            .where('O', Predicates.blocks(GTBlocks.COIL_CUPRONICKEL.get()))
            .where('C', Predicates.blocks(GTBlocks.MACHINE_CASING_ULV.get())
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setExactLimit(1)))
            .build())
        .shapeInfo(controller => MultiblockShapeInfo.builder()
            .aisle('CHF', ' O ', '   ')
            .aisle('COC', 'SWP', ' O ')
            .aisle('CKI', ' O ', '   ')
            .where('K', controller, Direction.SOUTH)
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('S', 
                Block.getBlock('gtceu:lv_kinetic_input_box').defaultBlockState().setValue(BlockProperties.FACING, Direction.WEST))
            .where('W', GTBlocks.CASING_BRONZE_GEARBOX.get())
            .where('P', GTMachines.ENERGY_OUTPUT_HATCH[0], Direction.EAST)
            .where('O', GTBlocks.COIL_CUPRONICKEL.get())
            .where('C', GTBlocks.MACHINE_CASING_ULV.get())
            .where('I', GTMachines.ITEM_IMPORT_BUS[0], Direction.EAST)
            .where('F', GTMachines.FLUID_IMPORT_HATCH[0], Direction.EAST)
            .where(' ', Block.getBlock('minecraft:air'))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('H', 
                Block.getBlock('gtceu:maintenance_hatch').defaultBlockState().setValue(BlockProperties.FACING, Direction.NORTH))
        .build())
        .workableCasingRenderer(
            "gtceu:block/casings/voltage/ulv/side",
            "gtceu:block/multiblock/gcym/large_mixer",
            false
        )
    */
    
    event.create("greenhouse", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("greenhouse")
        .appearanceBlock(GTBlocks.CASING_STEEL_SOLID)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) =>
            FactoryBlockPattern.start()
                .aisle("BBB", "BBB", "BBB", "BBB")
                .aisle("BBB", "G#G", "G#G", "BBB")
                .aisle("BEB", "GGG", "GGG", "BBB")
                .where("E", Predicates.controller(Predicates.blocks(definition.get())))
                .where("G", Predicates.blocks("gtceu:tempered_glass"))
                .where("B", Predicates.blocks(GTBlocks.CASING_STEEL_SOLID.get())
                    .setMinGlobalLimited(14)
                    .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                    .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1)))
                .where("#", Predicates.air())
                .where("0", Predicates.any())
                .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_solid_steel",
            "gtceu:block/multiblock/implosion_compressor", false
        )

    event.create("ammo_assembler", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("ammo_assembler")
        .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("BBBBBBB", "BBBBBBB", "0000000")
            .aisle("BBBBBBB", "I#####O", "BBBFBBB")
            .aisle("EBBBBBB", "BGGGGGB", "0000000")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("G", Predicates.blocks("gtceu:tempered_glass"))
            .where("B", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get())
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.INPUT_ENERGY).setExactLimit(1))
            )
            .where("I", Predicates.abilities(PartAbility.IMPORT_ITEMS))
            .where("O", Predicates.abilities(PartAbility.EXPORT_ITEMS))
            .where("F", Predicates.abilities(PartAbility.IMPORT_FLUIDS))
            .where("#", Predicates.air())
            .where("0", Predicates.any())
            .build())
        .shapeInfo(controller => MultiblockShapeInfo.builder()
            .aisle("BBBBBBB", "BBBBBBB", "0000000")
            .aisle("BBBBBBB", "I00000O", "BBBFBBB")
            .aisle("EBBMBBP", "BGGGGGB", "0000000")
            .where('E', controller, Direction.SOUTH)
            .where('G', Block.getBlock('gtceu:tempered_glass'))
            .where('B', GTBlocks.CASING_STAINLESS_CLEAN.get())
            .where('I', GTMachines.ITEM_IMPORT_BUS[0], Direction.WEST)
            .where('O', GTMachines.ITEM_EXPORT_BUS[0], Direction.EAST)
            .where('F', GTMachines.FLUID_IMPORT_HATCH[0], Direction.UP)
            .where('P', GTMachines.ENERGY_INPUT_HATCH[0], Direction.SOUTH)
            .where('0', Block.getBlock('minecraft:air'))
            ["where(char,net.minecraft.world.level.block.state.BlockState)"]('M', 
                Block.getBlock('gtceu:maintenance_hatch').defaultBlockState().setValue(BlockProperties.FACING, Direction.SOUTH))
        .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
            "gtceu:block/multiblock/gcym/large_assembler", false
        )
    
    event.create("nuclear_implosion_compressor", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("nuclear_implosion_compressor")
        .appearanceBlock(GCyMBlocks.CASING_VIBRATION_SAFE)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle
            .aisle("          SSSFSSS          ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "            FFF            ", "            FFF            ", "            BBB            ", "           BBBBB           ", "          BBBBBBB          ", "        FFBBBBBBBFF        ", "          BBBBBBB          ", "           BBBBB           ", "            BBB            ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("        SSSSSSSSSSS        ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "           F   F           ", "            F F            ", "          BBBBBBB          ", "         BBBBBBBBB         ", "        BBBBRRRBBBB        ", "        BBBRRRRRBBB        ", "        BBRRRRRRRBB        ", "      FFBBRRRRRRRBBFF      ", "        BBRRRRRRRBB        ", "        BBBRRRRRBBB        ", "        BBBBRRRBBBB        ", "         BBBBBBBBB         ", "          BBBBBBB          ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("      SSSSSSSSSSSSSSS      ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "           F   F           ", "           BBBBB           ", "         BBBBBBBBB         ", "        BBRRRRRRRBB        ", "       BBRRRRRRRRRBB       ", "       BRRRR000RRRRB       ", "      BBRRR00000RRRBB      ", "      BBRR0000000RRBB      ", "     FBBRR0000000RRBBF     ", "      BBRR0000000RRBB      ", "      BBRRR00000RRRBB      ", "       BRRRR000RRRRB       ", "       BBRRRRRRRRRBB       ", "        BBRRRRRRRBB        ", "         BBBBBBBBB         ", "           BBBBB           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("    FSSSSSSSSSSSSSSSSSF    ", "    F                 F    ", "    F                 F    ", "    F                 F    ", "    F                 F    ", "    F                 F    ", "    F      F   F      F    ", "    F     BBBBBBB     F    ", "    F   BBBRRRRRBBB   F    ", "    F  BBRRRRRRRRRBB  F    ", "    F BBRR0000000RRBB F    ", "    F BRR000000000RRB F    ", "    FBBR00000000000RBBF    ", "    FBRR00000000000RRBF    ", "    FBRR00000000000RRBF    ", "    FBRR00000000000RRBF    ", "     BRR00000000000RRB     ", "     BRR00000000000RRB     ", "     BBR00000000000RBB     ", "      BRR000000000RRB      ", "      BBRR0000000RRBB      ", "       BBRRRRRRRRRBB       ", "        BBBRRRRRBBB        ", "          BBBBBBB          ", "                           ", "                           ", "                           ", "                           ")
            .aisle("    SSSSSSSSSSSSSSSSSSS    ", "                           ", "                           ", "                           ", "                           ", "          F     F          ", "          BBBBBBB          ", "        BBRRRRRRRBB        ", "     F BRRR00000RRRB F     ", "     FBRR000000000RRBF     ", "     BRR00000000000RRB     ", "     BR0000000000000RB     ", "    BRR0000000000000RRB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   FBR000000000000000RBF   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BRR0000000000000RRB    ", "     BR0000000000000RB     ", "     BRR00000000000RRB     ", "      BRR000000000RRB      ", "       BRRR00000RRRB       ", "        BBRRRRRRRBB        ", "          BBBBBBB          ", "                           ", "                           ", "                           ")
            .aisle("   SSSSSSSSSSSSSSSSSSSSS   ", "                           ", "                           ", "                           ", "                           ", "          FBBBBBF          ", "      F BBBRRRRRBBB F      ", "      FBRRR00000RRRBF      ", "      BR00000000000RB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BR00000000000RB      ", "       BRRR00000RRRB       ", "        BBBRRRRRBBB        ", "           BBBBB           ", "                           ", "                           ")
            .aisle("   SSSSSSSSSSSSSSSSSSSSS   ", "                           ", "                           ", "                           ", "          F     F          ", "       F BBBBBBBBB F       ", "       BBRRRRRRRRRBB       ", "      BRR000000000RRB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BRR000000000RRB      ", "       BBRRRRRRRRRBB       ", "         BBBBBBBBB         ", "                           ", "                           ")
            .aisle("  SSSSSSSSSSSSSSSSSSSSSSS  ", "        SSSSSSSSSSS        ", "                           ", "          F     F          ", "        F BBBBBBB F        ", "        BBRRRRRRRBB        ", "      BBRR0000000RRBB      ", "     BRR00000000000RRB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " FBR0000000000000000000RBF ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRR0000000RRBB      ", "        BBRRRRRRRBB        ", "          BBBBBBB          ", "                           ")
            .aisle("  SSSSSSSSSSSSSSSSSSSSSSS  ", "        SSSSSSSSSSS        ", "          F     F          ", "         FFFFFFFFF         ", "         BBBBBBBBB         ", "       BBRRRRRRRRRBB       ", "      BRR000000000RRB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " FBR0000000000000000000RBF ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BRR000000000RRB      ", "       BBRRRRRRRRRBB       ", "         BBBBBBBBB         ", "                           ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSSSSSSSS        ", "         F F   F F         ", "        FF FBBBF FF        ", "       FBBBBRRRBBBBF       ", "     FFBRRRR000RRRRBFF     ", "     BBR00000000000RBB     ", "    BRR0000000000000RRB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BRR0000000000000RRB    ", "     BBR00000000000RBB     ", "       BRRRR000RRRRB       ", "        BBBBRRRBBBB        ", "            BBB            ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSSSSSSSS        ", "          FSSSSSF          ", "         FFBBBBBFF         ", "        BBBRRRRRBBB        ", "      BBRRR00000RRRBB      ", "    FBRR00000000000RRBF    ", "   FBR000000000000000RBF   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRRR00000RRRBB      ", "        BBBRRRRRBBB        ", "           BBBBB           ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSTTTSSSS        ", "           STTTS           ", "         FBBTTTBBF         ", "        BBRRTTTRRBB        ", "      BBRR0000000RRBB      ", "     BRR00000000000RRB     ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", " FBR0000000000000000000RBF ", " FBR0000000000000000000RBF ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRR0000000RRBB      ", "        BBRRRRRRRBB        ", "          BBBBBBB          ")
            .aisle(" FSSSSSSSSSSSSSSSSSSSSSSSF ", " F      SSSSTGTSSSS      F ", " F         STGTS         F ", " F       FBBTGTBBF       F ", " F      BBRRTGTRRBB      F ", " F    BBRR0000000RRBB    F ", " F   BRR00000000000RRB   F ", " F  BR000000000000000RB  F ", " F BR00000000000000000RB F ", " F BR00000000000000000RB F ", " FBR0000000000000000000RBF ", " FBR0000000000000000000RBF ", "FBR000000000000000000000RBF", "FBR000000000000000000000RBF", "FBR000000000000000000000RBF", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRR0000000RRBB      ", "        BBRRRRRRRBB        ", "          BBBBBBB          ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSTGTSSSS        ", "           STTTS           ", "         FBBTTTBBF         ", "        BBRRTTTRRBB        ", "      BBRR0000000RRBB      ", "     BRR00000000000RRB     ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", " FBR0000000000000000000RBF ", " FBR0000000000000000000RBF ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRR0000000RRBB      ", "        BBRRRRRRRBB        ", "          BBBBBBB          ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSTGTSSSS        ", "          FSSSSSF          ", "         FFBBBBBFF         ", "        BBBRRRRRBBB        ", "      BBRRR00000RRRBB      ", "    FBRR00000000000RRBF    ", "   FBR000000000000000RBF   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRRR00000RRRBB      ", "        BBBRRRRRBBB        ", "           BBBBB           ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSSSSSS ", "        SSSSTGTSSSS        ", "         F FSSSF F         ", "        FF FBBBF FF        ", "       FBBBBRRRBBBBF       ", "     FFBRRRR000RRRRBFF     ", "     BBR00000000000RBB     ", "    BRR0000000000000RRB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " BR000000000000000000000RB ", "FBR000000000000000000000RBF", " BR000000000000000000000RB ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BRR0000000000000RRB    ", "     BBR00000000000RBB     ", "       BRRRR000RRRRB       ", "        BBBBRRRBBBB        ", "            BBB            ")
            .aisle("  SSSSSSSSSSSSSSSSSSSSSSS  ", "        SSSSTGTSSSS        ", "          F SSS F          ", "         FFFFFFFFF         ", "         BBBBBBBBB         ", "       BBRRRRRRRRRBB       ", "      BRR000000000RRB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " FBR0000000000000000000RBF ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BRR000000000RRB      ", "       BBRRRRRRRRRBB       ", "         BBBBBBBBB         ", "                           ")
            .aisle("  SSSSSSSSSSSSSSSSSSSSSSS  ", "        SSSSTGTSSSS        ", "            SSS            ", "          F     F          ", "        F BBBBBBB F        ", "        BBRRRRRRRBB        ", "      BBRR0000000RRBB      ", "     BRR00000000000RRB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", " FBR0000000000000000000RBF ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "  BR0000000000000000000RB  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BRR00000000000RRB     ", "      BBRR0000000RRBB      ", "        BBRRRRRRRBB        ", "          BBBBBBB          ", "                           ")
            .aisle("   SSSSSSSSSSSSSSSSSSSSS   ", "           STGTS           ", "            SSS            ", "                           ", "          F     F          ", "       F BBBBBBBBB F       ", "       BBRRRRRRRRRBB       ", "      BRR000000000RRB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BRR000000000RRB      ", "       BBRRRRRRRRRBB       ", "         BBBBBBBBB         ", "                           ", "                           ")
            .aisle("   SSSSSSSSSSSSSSSSSSSSS   ", "           STGTS           ", "            SSS            ", "                           ", "                           ", "          FBBBBBF          ", "      F BBBRRRRRBBB F      ", "      FBRRR00000RRRBF      ", "      BR00000000000RB      ", "     BR0000000000000RB     ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "  FBR00000000000000000RBF  ", "   BR00000000000000000RB   ", "   BR00000000000000000RB   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "     BR0000000000000RB     ", "      BR00000000000RB      ", "       BRRR00000RRRB       ", "        BBBRRRRRBBB        ", "           BBBBB           ", "                           ", "                           ")
            .aisle("    SSSSSSSSSSSSSSSSSSS    ", "           STGTS           ", "            SSS            ", "                           ", "                           ", "          F     F          ", "          BBBBBBB          ", "        BBRRRRRRRBB        ", "     F BRRR00000RRRB F     ", "     FBRR000000000RRBF     ", "     BRR00000000000RRB     ", "     BR0000000000000RB     ", "    BRR0000000000000RRB    ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "   FBR000000000000000RBF   ", "    BR000000000000000RB    ", "    BR000000000000000RB    ", "    BRR0000000000000RRB    ", "     BR0000000000000RB     ", "     BRR00000000000RRB     ", "      BRR000000000RRB      ", "       BRRR00000RRRB       ", "        BBRRRRRRRBB        ", "          BBBBBBB          ", "                           ", "                           ", "                           ")
            .aisle("    FSSSSSSSSSSSSSSSSSF    ", "    F      STGTS      F    ", "    F       SSS       F    ", "    F                 F    ", "    F                 F    ", "    F                 F    ", "    F      F   F      F    ", "    F     BBBBBBB     F    ", "    F   BBBRRRRRBBB   F    ", "    F  BBRRRRRRRRRBB  F    ", "    F BBRR0000000RRBB F    ", "    F BRR000000000RRB F    ", "    FBBR00000000000RBBF    ", "    FBRR00000000000RRBF    ", "    FBRR00000000000RRBF    ", "    FBRR00000000000RRBF    ", "     BRR00000000000RRB     ", "     BRR00000000000RRB     ", "     BBR00000000000RBB     ", "      BRR000000000RRB      ", "      BBRR0000000RRBB      ", "       BBRRRRRRRRRBB       ", "        BBBRRRRRBBB        ", "          BBBBBBB          ", "                           ", "                           ", "                           ", "                           ")
            .aisle("      SSSSSSSSSSSSSSS      ", "           STGTS           ", "            SSS            ", "                           ", "                           ", "                           ", "                           ", "           F   F           ", "           BBBBB           ", "         BBBBBBBBB         ", "        BBRRRRRRRBB        ", "       BBRRRRRRRRRBB       ", "       BRRRR000RRRRB       ", "      BBRRR00000RRRBB      ", "      BBRR0000000RRBB      ", "     FBBRR0000000RRBBF     ", "      BBRR0000000RRBB      ", "      BBRRR00000RRRBB      ", "       BRRRR000RRRRB       ", "       BBRRRRRRRRRBB       ", "        BBRRRRRRRBB        ", "         BBBBBBBBB         ", "           BBBBB           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("        SSSSSSSSSSS        ", "           STGTS           ", "            SSS            ", "                           ", "                           ", "                           ", "                           ", "                           ", "           F   F           ", "            F F            ", "          BBBBBBB          ", "         BBBBBBBBB         ", "        BBBBRRRBBBB        ", "        BBBRRRRRBBB        ", "        BBRRRRRRRBB        ", "      FFBBRRRRRRRBBFF      ", "        BBRRRRRRRBB        ", "        BBBRRRRRBBB        ", "        BBBBRRRBBBB        ", "         BBBBBBBBB         ", "          BBBBBBB          ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("          SSSSSSS          ", "           STGTS           ", "            SSS            ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "             F             ", "            FFF            ", "            FFF            ", "            BBB            ", "           BBBBB           ", "          BBBBBBB          ", "        FFBBBBBBBFF        ", "          BBBBBBB          ", "           BBBBB           ", "            BBB            ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .aisle("           CCCCC           ", "           CCECC           ", "            CCC            ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "             F             ", "             F             ", "             F             ", "          FFFFFFF          ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ", "                           ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("T", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
            .where("G", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
            .where("B", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
            .where("R", Predicates.blocks("gtnn:radiation_proof_machine_casing"))
            .where("S", Predicates.blocks(GCyMBlocks.CASING_VIBRATION_SAFE.get()))
            .where("C", Predicates.blocks(GCyMBlocks.CASING_VIBRATION_SAFE.get()).setMinGlobalLimited(3)
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
                .or(Predicates.abilities(PartAbility.MUFFLER).setExactLimit(1))
            )
            .where("F", Predicates.blocks("gtceu:radiation_protection_frame"))
            .where("0", Predicates.air())
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/gcym/vibration_safe_casing",
            "gtceu:block/multiblock/implosion_compressor", false
        )
    
    event.create("genetic_extractor", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("genetic_extractor")
        .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("LLLLL    ", "LLLLL    ", "LLLLL    ", "LLLLL    ", "LLLLL    ")
            .aisle("LLLLLCCCC", "L0T0LCCCC", "LLLLLCCCC", "LTTTL    ", "LLLLL    ")
            .aisle("LLLLLBBBC", "LTWTL000C", "LLWLLCCCC", "LTTTL    ", "LLLLL    ")
            .aisle("LLLLLCCCC", "L0T0LCECC", "LLLLL    ", "LLLLL    ", "LLLLL    ")
            .aisle("LLLLL    ", "LGGGL    ", "         ", "         ", "         ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('gtceu:tempered_glass'))
            .where('L', Predicates.blocks(GCyMBlocks.CASING_LARGE_SCALE_ASSEMBLING.get()))
            .where("T", Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
            .where("W", Predicates.blocks(GTBlocks.CASING_STAINLESS_STEEL_GEARBOX.get()))
            .where("B", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
            .where("C", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()).setMinGlobalLimited(20)
                .or(Predicates.autoAbilities(definition.recipeTypes))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("0", Predicates.air())
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
            "gtceu:block/multiblock/large_chemical_reactor", false
        )

    event.create("biological_cloner", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("biological_cloner")
        .appearanceBlock(GTBlocks.CASING_STAINLESS_CLEAN)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("LLLLLL    ", "LLLLLL    ", "LLLLLL    ", "LLLLLL    ", "LLLLLL    ", "LLLLLL    ", "LLLLLL    ")
            .aisle("LLLLLLCCCC", "L0000LCCCC", "L0000LCCCC", "L0000L    ", "L0000L    ", "L0000L    ", "LLLLLL    ")
            .aisle("LLLLLLBBBC", "L0000L000C", "L0000LCCCC", "L0000L    ", "L0000L    ", "L0000L    ", "LGGGGL    ")
            .aisle("LLLLLLCCCC", "L0000LCECC", "L0000L    ", "L0000L    ", "L0000L    ", "LGGGGL    ", "          ")
            .aisle("LLLLLL    ", "LGGGGL    ", "LGGGGL    ", "LGGGGL    ", "LGGGGL    ", "          ", "          ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where('G', Predicates.blocks('gtceu:tempered_glass'))
            .where('L', Predicates.blocks(GCyMBlocks.CASING_LARGE_SCALE_ASSEMBLING.get()))
            .where("B", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()))
            .where("C", Predicates.blocks(GTBlocks.CASING_STAINLESS_CLEAN.get()).setMinGlobalLimited(20)
                .or(Predicates.autoAbilities(definition.recipeTypes))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("0", Predicates.air())
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_clean_stainless_steel",
            "gtceu:block/multiblock/large_chemical_reactor", false
        )

    event.create("source_reactor", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("source_reactor")
        .appearanceBlock(GTBlocks.CASING_TITANIUM_STABLE)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("CCCCCCC", "F     F", "F     F", "F     F", "F     F", "F     F", "F     F", "F     F", "CCCCCCC")
            .aisle("CCCCCCC", "  P P  ", " 00M00 ", " 00M00 ", " 00000 ", " 00M00 ", " 00M00 ", "       ", "CCCCCCC")
            .aisle("CCBBBCC", " PLLLP ", " 00M00 ", " 00000 ", " 00000 ", " 00000 ", " 00M00 ", "  LLL  ", "CCCCCCC")
            .aisle("CCBBBCC", "  LGL  ", " MMTMM ", " M000M ", " 00000 ", " M000M ", " MMTMM ", "  LGL  ", "CCCCCCC")
            .aisle("CCBBBCC", " PLLLP ", " 00M00 ", " 00000 ", " 00000 ", " 00000 ", " 00M00 ", "  LLL  ", "CCCCCCC")
            .aisle("CCCCCCC", "  P P  ", " 00M00 ", " 00M00 ", " 00000 ", " 00M00 ", " 00M00 ", "       ", "CCCCCCC")
            .aisle("CCCECCC", "F     F", "F     F", "F     F", "F     F", "F     F", "F     F", "F     F", "CCCCCCC")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("F", Predicates.blocks('gtceu:soursteel_frame'))
            .where("M", Predicates.blocks('gtceu:managold_block'))
            .where("L", Predicates.blocks('kubejs:soursteel_casing'))
            .where("B", Predicates.blocks('ars_nouveau:arcane_core'))
            .where("P", Predicates.blocks('ars_nouveau:arcane_pedestal'))
            .where("T", Predicates.blocks(GTBlocks.CASING_TITANIUM_PIPE.get()))
            .where("G", Predicates.blocks(GTBlocks.CASING_TITANIUM_GEARBOX.get()))
            .where("C", Predicates.blocks(GTBlocks.CASING_TITANIUM_STABLE.get()).setMinGlobalLimited(72)
                .or(Predicates.autoAbilities(definition.recipeTypes))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("0", Predicates.air())
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_stable_titanium",
            "gtceu:block/multiblock/large_chemical_reactor", false
        )

    event.create("keke_generator", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("keke_generator")
        .generator(true)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK))
        .appearanceBlock(GTBlocks.MACHINE_CASING_UHV)
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("CCCCCCCCC", "UUCCCCCUU", "CUCCCCCUC", "CUCCCCCUC", "CUUUUUUUC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "UHHHHHHHU", "UH00000HU", "UH00000HU", "UH00000HU", "CH00000HC", "CH00000HC", "CHHHHHHHC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "CH00000HC", "C0000000C", "C0000000C", "U0000000U", "C0000000C", "C0000000C", "CH00000HC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "CH00000HC", "C0000000C", "C0000000C", "U0000000U", "C0000000C", "C0000000C", "CH00000HC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "CH00000HC", "C0000000C", "C0000000C", "U0000000U", "C0000000C", "C0000000C", "CH00000HC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "CH00000HC", "C0000000C", "C0000000C", "U0000000U", "C0000000C", "C0000000C", "CH00000HC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "CH00000HC", "C0000000C", "C0000000C", "U0000000U", "C0000000C", "C0000000C", "CH00000HC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "UHHHHHHHU", "UH00000HU", "UH00000HU", "UH00000HU", "CH00000HC", "CH00000HC", "CHHHHHHHC", "CCCCCCCCC")
            .aisle("CCCCCCCCC", "UUCCCCCUU", "CUCCCCCUC", "CUCCCCCUC", "CUUUEUUUC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC", "CCCCCCCCC")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("U", Predicates.blocks("gtceu:uhv_machine_casing")
                .or(Predicates.abilities(PartAbility.OUTPUT_LASER).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.IMPORT_ITEMS).setMaxGlobalLimited(2))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setMaxGlobalLimited(1))
                .or(Predicates.abilities(PartAbility.IMPORT_FLUIDS).setMaxGlobalLimited(2)))
            .where("C", Predicates.blocks("kubejs:shully_casing"))    
            .where("H", Predicates.blocks("gtceu:hyper_enderite_frame"))
            .where("0", Predicates.blocks("kubejs:shully_reactor_block"))
            .build())
            .workableCasingRenderer("gtceu:block/casings/voltage/uhv/side", "gtceu:block/multiblock/gcym/large_electrolyzer")

    event.create("bedrock_miner", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("bedrock_miner")
        .appearanceBlock(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.NON_PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("CCCCCCC", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
            .aisle("CSSSSSC", "  FSF  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
            .aisle("CSSSSSC", " FSTSF ", "  FSF  ", "   F   ", "   F   ", "   F   ", "       ", "       ", "       ")
            .aisle("CSSTSSC", " STGTS ", "  STS  ", "  FSF  ", "  FSF  ", "  FSF  ", "   F   ", "   F   ", "   F   ")
            .aisle("CSSSSSC", " FSTSF ", "  FSF  ", "   F   ", "   F   ", "   F   ", "       ", "       ", "       ")
            .aisle("CSSSSSC", "  FSF  ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
            .aisle("CCCECCC", "       ", "       ", "       ", "       ", "       ", "       ", "       ", "       ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("T", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
            .where("G", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
            .where("S", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()))
            .where("C", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_ROBUST.get()).setMinGlobalLimited(15)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("F", Predicates.blocks("gtceu:tungsten_steel_frame"))
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_robust_tungstensteel",
            "gtceu:block/multiblock/large_chemical_reactor", false
        )

    event.create("large_bedrock_miner", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("bedrock_miner")
        .appearanceBlock(GTBlocks.CASING_HSSE_STURDY)
        .recipeModifiers([GTRecipeModifiers.PARALLEL_HATCH, GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK)])
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("CCCCCCCCCCC", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", "   F   F   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", "    SSS    ", "   FSSSF   ", "    SSS    ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", " F FSTSF F ", "  FFSTSFF  ", "   FSSSF   ", "    FFF    ", "    F F    ", "    F F    ", "    F F    ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", "  SSTGTSS  ", "  SSTTTSS  ", "  SSSSSSS  ", "   FSSSF   ", "   FSSSF   ", "   FSSSF   ", "   FSSSF   ", "    FFF    ", "     F     ", "     F     ", "     F     ", "           ", "           ", "           ")
            .aisle("CSSSSTSSSSC", "  STGTGTS  ", "  STTGTTS  ", "  SSSTSSS  ", "   FSTSF   ", "    STS    ", "    STS    ", "    STS    ", "    FSF    ", "    FSF    ", "    FSF    ", "    FSF    ", "     F     ", "     F     ", "     F     ")
            .aisle("CSSSSSSSSSC", "  SSTGTSS  ", "  SSTTTSS  ", "  SSSSSSS  ", "   FSSSF   ", "   FSSSF   ", "   FSSSF   ", "   FSSSF   ", "    FFF    ", "     F     ", "     F     ", "     F     ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", " F FSTSF F ", "  FFSTSFF  ", "   FSSSF   ", "    FFF    ", "    F F    ", "    F F    ", "    F F    ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", "    SSS    ", "   FSSSF   ", "    SSS    ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CSSSSSSSSSC", "   F   F   ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .aisle("CCCCCECCCCC", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ", "           ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("T", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_PIPE.get()))
            .where("G", Predicates.blocks(GTBlocks.CASING_TUNGSTENSTEEL_GEARBOX.get()))
            .where("S", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()))
            .where("C", Predicates.blocks(GTBlocks.CASING_HSSE_STURDY.get()).setMinGlobalLimited(30)
                .or(Predicates.abilities(PartAbility.PARALLEL_HATCH).setMaxGlobalLimited(1))
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("F", Predicates.blocks("gtceu:naquadah_alloy_frame"))
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/solid/machine_casing_sturdy_hsse",
            "gtceu:block/multiblock/large_chemical_reactor", false
        )

    event.create("cosmic_matter_collector", "multiblock")
        .rotationState(RotationState.NON_Y_AXIS)
        .recipeType("cosmic_matter_collector")
        .appearanceBlock(GTBlocks.MACHINE_CASING_UV)
        .recipeModifier(GTRecipeModifiers.ELECTRIC_OVERCLOCK.apply(OverclockingLogic.PERFECT_OVERCLOCK))
        .pattern((definition) => FactoryBlockPattern.start()
            .aisle("        SSSSSSS        ", "        CCCCCCC        ", "        SSSSSSS        ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "        MMMMMMM        ")
            .aisle("      SSSSSSSSSSS      ", "      CC0000000CC      ", "      SSXXXXXXXSS      ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "      MMMMMMMMMMM      ")
            .aisle("    SSSSSSSSSSSSSSS    ", "    CC00XXXXXXX00CC    ", "    SSXX0000000XXSS    ", "        XXXXXXX        ", "        F     F        ", "                       ", "                       ", "        F     F        ", "                       ", "    MMMMMMMMMMMMMMM    ")
            .aisle("   SSSSSSSSSSSSSSSSS   ", "   C00XXX00000XXX00C   ", "   SXX000YYYYY000XXS   ", "      XXX     XXX      ", "        F     F        ", "                       ", "        F     F        ", "                       ", "         MMMMM         ", "   MMMMMM00000MMMMMM   ")
            .aisle("  SSSSSSSSSSSSSSSSSSS  ", "  C00XX00YYYYY00XX00C  ", "  SXXc0YY00000YY0cXXS  ", "     XX  YYYYY  XX     ", "        F     F        ", "        F     F        ", "                       ", "                       ", "       MMMMMMMMM       ", "  MMMMM000000000MMMMM  ")
            .aisle("  SSSSSSSSSSSSSSSSSSS  ", "  C0X00YY00000YY00X0C  ", "  SXcYYc0ZZZZZ0cYYcXS  ", "    X  YY     YY  X    ", "        F     F        ", "                       ", "                       ", "         MMMMM         ", "     MMMM00000MMMM     ", "  MMM0000000000000MMM  ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSS ", " C0XX0Y00ZZZZZ00Y0XX0C ", " SX00YcZZ00000ZZcY00XS ", "   XX Y  ZZZZZ  Y XX   ", "        F     F        ", "                       ", "         MMMMM         ", "       MM00000MM       ", "     MM000000000MM     ", " MMMM0000000000000MMMM ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSS ", " C0X0Y00ZZMMMZZ00Y0X0C ", " SX0YcZZc0MMM0cZZcY0XS ", "   X Y  ZZMMMZZ  Y X   ", "        F MMM F        ", "         MMMMM         ", "        M00000M        ", "      MM0000000MM      ", "    MM00000000000MM    ", " MMM000000000000000MMM ")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0XX0Y0ZFMRRRMFZ0Y0XX0C", "SX00Y0ZcFMRRRMFcZ0Y00XS", " FXX Y ZFMRRRMFZ Y XXF ", " FFFFFFFFMNNNMFFFFFFFF ", " F  F   M00000M   F  F ", " F F   M0000000M   F F ", " FF   M000000000M   FF ", " F  MM00000000000MM  F ", "MMMM000000000000000MMMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0X0Y0ZZMRRRRRMZZ0Y0X0C", "SX0Y0Z00MRRRRRM00Z0Y0XS", "  X Y ZZMRRRRRMZZ Y X  ", "        MNNNNNM        ", "       M0000000M       ", "      M000000000M      ", "     M00000000000M     ", "   MM0000000000000MM   ", "MMM00000000000000000MMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0X0Y0ZMRRRRRRRMZ0Y0X0C", "SX0Y0Z0MRRRRRRRM0Z0Y0XS", "  X Y ZMRRRRRRRMZ Y X  ", "       MNNNNNNNM       ", "       M0000000M       ", "      M000000000M      ", "     M00000000000M     ", "   MM0000000000000MM   ", "MMM00000000000000000MMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0X0Y0ZMRRRRRRRMZ0Y0X0C", "SX0Y0Z0MRRRRRRRM0Z0Y0XS", "  X Y ZMRRRRRRRMZ Y X  ", "       MNNNNNNNM       ", "       M0000000M       ", "      M000000000M      ", "     M00000000000M     ", "   MM0000000000000MM   ", "MMM00000000000000000MMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0X0Y0ZMRRRRRRRMZ0Y0X0C", "SX0Y0Z0MRRRRRRRM0Z0Y0XS", "  X Y ZMRRRRRRRMZ Y X  ", "       MNNNNNNNM       ", "       M0000000M       ", "      M000000000M      ", "     M00000000000M     ", "   MM0000000000000MM   ", "MMM00000000000000000MMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0X0Y0ZZMRRRRRMZZ0Y0X0C", "SX0Y0Z00MRRRRRM00Z0Y0XS", "  X Y ZZMRRRRRMZZ Y X  ", "        MNNNNNM        ", "       M0000000M       ", "      M000000000M      ", "     M00000000000M     ", "   MM0000000000000MM   ", "MMM00000000000000000MMM")
            .aisle("SSSSSSSSSSSSSSSSSSSSSSS", "C0XX0Y0ZFMRRRMFZ0Y0XX0C", "SX00Y0ZcFMRRRMFcZ0Y00XS", " FXX Y ZFMRRRMFZ Y XXF ", " FFFFFFFFMNNNMFFFFFFFF ", " F  F   M00000M   F  F ", " F F   M0000000M   F F ", " FF   M000000000M   FF ", " F  MM00000000000MM  F ", "MMMM000000000000000MMMM")
            .aisle(" SSSSSSSSSSSSSSSSSSSSS ", " C0X0Y00ZZMMMZZ00Y0X0C ", " SX0YcZZc0MMM0cZZcY0XS ", "   X Y  ZZMMMZZ  Y X   ", "        F MMM F        ", "         MMMMM         ", "        M00000M        ", "      MM0000000MM      ", "    MM00000000000MM    ", " MMM000000000000000MMM ")
            .aisle(" SSSSSSSSSSSSSSSSSSSSS ", " C0XX0Y00ZZZZZ00Y0XX0C ", " SX00YcZZ00000ZZcY00XS ", "   XX Y  ZZZZZ  Y XX   ", "        F     F        ", "                       ", "         MMMMM         ", "       MM00000MM       ", "     MM000000000MM     ", " MMMM0000000000000MMMM ")
            .aisle("  SSSSSSSSSSSSSSSSSSS  ", "  C0X00YY00000YY00X0C  ", "  SXcYYc0ZZZZZ0cYYcXS  ", "    X  YY     YY  X    ", "        F     F        ", "                       ", "                       ", "         MMMMM         ", "     MMMM00000MMMM     ", "  MMM0000000000000MMM  ")
            .aisle("  SSSSSSSSSSSSSSSSSSS  ", "  C00XX00YYYYY00XX00C  ", "  SXXc0YY00000YY0cXXS  ", "     XX  YYYYY  XX     ", "        F     F        ", "        F     F        ", "                       ", "                       ", "       MMMMMMMMM       ", "  MMMMM000000000MMMMM  ")
            .aisle("   SSSSSSSSSSSSSSSSS   ", "   C00XXX00000XXX00C   ", "   SXX000YYYYY000XXS   ", "      XXX     XXX      ", "        F     F        ", "                       ", "        F     F        ", "                       ", "         MMMMM         ", "   MMMMMM00000MMMMMM   ")
            .aisle("    SSSSSSSSSSSSSSS    ", "    CC00XXXXXXX00CC    ", "    SSXX0000000XXSS    ", "        XXXXXXX        ", "        F     F        ", "                       ", "                       ", "        F     F        ", "                       ", "    MMMMMMMMMMMMMMM    ")
            .aisle("      SSSSSSSSSSS      ", "      CC0000000CC      ", "      SSXXXXXXXSS      ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "        F     F        ", "      MMMMMMMMMMM      ")
            .aisle("        SSSSSSS        ", "        CCCECCC        ", "        SSSSSSS        ", "                       ", "                       ", "                       ", "                       ", "                       ", "                       ", "        MMMMMMM        ")
            .where("E", Predicates.controller(Predicates.blocks(definition.get())))
            .where("S", Predicates.blocks("gtnn:radiation_proof_machine_casing"))
            .where("M", Predicates.blocks("gtnn:mar_casing"))
            .where("X", Predicates.blocks(GTBlocks.FUSION_CASING.get()))
            .where("Y", Predicates.blocks(GTBlocks.FUSION_CASING_MK2.get()))
            .where("Z", Predicates.blocks(GTBlocks.FUSION_CASING_MK3.get()))
            .where("C", Predicates.blocks(GTBlocks.MACHINE_CASING_UV.get()).setMinGlobalLimited(50)
                .or(Predicates.autoAbilities(definition.getRecipeTypes()))
                .or(Predicates.abilities(PartAbility.MAINTENANCE).setExactLimit(1))
            )
            .where("c", Predicates.blocks(GTBlocks.FUSION_COIL.get()))
            .where("F", Predicates.blocks("gtceu:hyper_enderite_frame"))
            .where("R", Predicates.blocks("kubejs:particle_stabilizing_block"))
            .where("N", Predicates.blocks("kubejs:particle_filter_block"))
            .where("0", Predicates.air())
            .where(" ", Predicates.any())
            .build())
        .workableCasingRenderer(
            "gtceu:block/casings/voltage/uv/side",
            "gtceu:block/multiblock/implosion_compressor", false
        )
})